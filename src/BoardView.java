import javax.swing.*;import java.awt.*;import java.awt.event.ActionListener;import java.util.Observable;import java.util.Observer;// BoardView is OBSERVERpublic class BoardView extends JFrame implements Observer{    JPanel topPanel, mainPanel, bottomPanel;    JPanel gamePanel;    JButton [] gameButton;    private Model model;    private static BoardView firstInstance = null;    public BoardView(){        createAndShowGui();    }    public void createAndShowGui(){        mainPanel = new JPanel();        topPanel = new JPanel();        bottomPanel = new JPanel();        gamePanel = new JPanel();        mainPanel.setBackground(Color.WHITE);        mainPanel.setLayout(new BorderLayout());        topPanel.setLayout(new FlowLayout());        topPanel.setBackground(Color.cyan);        topPanel.setPreferredSize(new Dimension(300, 80));        mainPanel.add(topPanel, BorderLayout.NORTH);        bottomPanel.setLayout(new FlowLayout());        bottomPanel.setBackground(Color.cyan);        bottomPanel.setPreferredSize(new Dimension(300, 80));        mainPanel.add(bottomPanel, BorderLayout.SOUTH);        gameButton = new JButton[9];        for(int i=0;i<9;i++){            gameButton[i] = new JButton();            gamePanel.add(gameButton[i]);        }        gamePanel.setLayout(new GridLayout(3, 3, 3, 3));        gamePanel.setBackground(Color.LIGHT_GRAY);        gamePanel.setPreferredSize(new Dimension(200, 200));        mainPanel.add(gamePanel, BorderLayout.CENTER);        this.getContentPane().add(mainPanel);        pack();        setTitle("TicTacToe v1.3");        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        setSize(300, 420);        setLocationRelativeTo(null);        setVisible(true);    }    public void resetView(){        for(int i=0;i<9;i++){            gameButton[i].setText("");        }    }    public void addModel(Model model){        this.model = model;    }    public void addActionListenerToButtons(ActionListener listenForGameButtons){        for(int i=0;i<9;i++){            gameButton[i].addActionListener(listenForGameButtons);            gameButton[i].putClientProperty("index", i);            gameButton[i].getClientProperty("index");        }    }    // Singleton Design Pattern    public static BoardView getInstance(){        if(firstInstance == null)            firstInstance = new BoardView();        return firstInstance;    }    @Override    public void update(Observable o, Object arg) {        Model theObservedButtons = (Model) o;       // define button by its index, use 'arg' i/o 'o'        System.out.println("BoardView  => arg is " + arg);        if (model.currentMark == Mark.X) {            gameButton[((int)arg)].setText(String.valueOf(Mark.X));        } else if(model.currentMark == Mark.O){            gameButton[((int)arg)].setText(String.valueOf(Mark.O));        }    }}